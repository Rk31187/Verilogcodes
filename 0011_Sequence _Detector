///////////////////////////////////////////////////////Sequence Detector//////////////////////////////////////////////////////////


*****************************************************RTL Logic**********************************************************************


module seq_0011(input clk,rst,data_in, output reg dout);
reg [2:0] nxt_state,prst_state;

parameter s0=3'b000,
			 s1=3'b001,
			 s2=3'b010,
			 s3=3'b011,
			 s4=3'b100;
always@(posedge clk or posedge rst)
	begin
		if(rst)
		begin
		prst_state<=s0;
		dout<=0;
		end
		else
		begin
		prst_state<=nxt_state;
		if(prst_state==s4)
		dout<=1;
		else
		dout<=0;
		end
	end

always@(*)
	begin
	case(prst_state)
	s0:nxt_state=(data_in==1'b0)?s1:s0;
	s1:nxt_state=(data_in==1'b0)?s2:s1;
	s2:nxt_state=(data_in==1'b1)?s3:s2;
	s3:nxt_state=(data_in==1'b1)?s4:s1;
	s4:nxt_state=(data_in==1'b1)?s0:s1;
	default :nxt_state=s0;
	endcase
	end
endmodule
	
	
				 

************************************************************TB***********************************************************************



module seq_0011_tb;

    reg clk;
    reg rst;
    reg data_in;
    wire dout;

    seq_0011 uut (
        .clk(clk),
        .rst(rst),
        .data_in(data_in),
        .dout(dout)
    );

    initial begin
        clk = 0;
        forever #5 clk = ~clk;
    end 

    initial begin
        rst = 1;
        data_in = 0; 
        #15 rst = 0;
        #10 data_in = 0; 
        #10 data_in = 0;  
        #10 data_in = 1;
        #10 data_in = 1;  
        #20;
        #10 data_in = 1;  
        #10 data_in = 0;  
        #10 data_in = 0;  
        #10 data_in = 1;
        #10 data_in = 1;  

    end

	
initial
$monitor($time,"input clk=%b,rst=%b,data_in=%b, output dout=%b",clk,rst,data_in,dout);
initial
	begin
	#1000 $finish;
	end
endmodule
	
	
